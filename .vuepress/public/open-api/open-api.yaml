openapi: 3.0.3
info:
  title: Meilisearch
  description: MeiliSearch API
  version: 0.20.0
servers:
  - url: '{protocol}://{domain}:{port}/'
    variables:
      protocol:
        enum:
          - https
          - http
        default: https
      domain:
        default: example.meilisearch.com
      port:
        default: '7700'

components:
  parameters:
    indexUid:
      $ref: ./parameters.yaml#/indexUid
    documentId:
      $ref: ./parameters.yaml#/documentId
    updateId:
      $ref: ./parameters.yaml#/updateId
    primaryKey:
      $ref: ./parameters.yaml#/primaryKey
    limit:
      $ref: ./parameters.yaml#/limit
    offset:
      $ref: ./parameters.yaml#/offset
    attributesToRetrieve:
      $ref: ./parameters.yaml#/attributesToRetrieve
  responses:
    202:
      $ref: ./responses.yaml#/202
    204:
      $ref: ./responses.yaml#/204
  schemas:
    timestamp:
      $ref: ./schemas.yaml#/timestamp
    index:
      $ref: ./schemas.yaml#/index
    document:
      $ref: ./schemas.yaml#/document
    documentId:
      $ref: ./schemas.yaml#/documentId
    facetFilters:
      $ref: ./schemas.yaml#/facetFilters
    hitDocument:
      $ref: ./schemas.yaml#/hitDocument
    matchesInfo:
      $ref: ./schemas.yaml#/matchesInfo
    queryResponse:
      $ref: ./schemas.yaml#/queryResponse
    update:
      $ref: ./schemas.yaml#/update
    synonyms:
      $ref: ./schemas.yaml#/synonyms
    stopWords:
      $ref: ./schemas.yaml#/stopWords
    rankingRules:
      $ref: ./schemas.yaml#/rankingRules
    attributesForFaceting:
      $ref: ./schemas.yaml#/attributesForFaceting
    distinctAttribute:
      $ref: ./schemas.yaml#/distinctAttribute
    searchableAttributes:
      $ref: ./schemas.yaml#/searchableAttributes
    displayedAttributes:
      $ref: ./schemas.yaml#/displayedAttributes
    settings:
      $ref: ./schemas.yaml#/settings
    stats:
      $ref: ./schemas.yaml#/stats
    dump:
      $ref: ./schemas.yaml#/dump
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-Meili-API-Key

tags:
  - name: Indexes
    description: |
      An index is an entity that gathers a set of [documents](/learn/core_concepts/documents.html) with its own settings.

      [Learn more about indexes](/learn/core_concepts/indexes.html).
  - name: Documents
    description: |
      Documents are objects composed of fields that can store any type of data.
      Each field contains an attribute and its associated value.

      Documents are stored inside [indexes](/learn/core_concepts/indexes.html).
      [Learn more about documents](/learn/core_concepts/documents.html).
  - name: Search
    description: |
      MeiliSearch exposes 2 routes to perform searches:

      * A POST route: this is the preferred route when using API authentication, as it allows [preflight request](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request) caching and better performances.
      * A GET route: the usage of this route is discouraged, unless you have good reason to do otherwise (specific caching abilities for example).

      Other than the differences mentioned above, the two routes are strictly equivalent.
  - name: Updates
    description: |
      The `updates` route gives information about the progress of the [asynchronous processes](/learn/advanced/asynchronous_updates.html).
  - name: Keys
    description: |
      Each instance of MeiliSearch has three keys: a master, a private, and a public. Each key has a given set of permissions on the API routes.

      You must have the master key to access the `keys` route.

      [More information about the keys and their rights](/reference/features/authentication.html).
  - name: Settings
    description: |
      `Settings` is a list of all the __customization__ possible for an index.

      It is possible to update all the settings in one go or individually with the dedicated routes. Updates in the settings route are __partial__. This means that any parameters not provided in the body will be left unchanged.

      Updating the settings means overwriting the default settings of MeiliSearch. You can reset to default values using the `DELETE` routes.
  - name: Stats
    description: |
      `Stats` gives extended information and metrics about indexes and the MeiliSearch database.
  - name: Health
    description: |
      The health check endpoint enables you to periodically test the health of your MeiliSearch instance.
  - name: Version
    description: |
      Current version of Meilisearch.
  - name: Dumps
    description: |
      The `dumps` route allows the creation of database dumps. Dumps are `.dump` files that can be used to launch MeiliSearch. Dumps are compatible between MeiliSearch versions.

      Creating a dump is also referred to as exporting it, whereas launching MeiliSearch with a dump is referred to as importing it.

      During a [dump export](/reference/api/dump.html#create-a-dump), all indexes of the current instance are exported—together with their documents and settings—and saved as a single `.dump` file.

      During a dump import, all indexes contained in the indicated `.dump` file are imported along with their associated documents and settings. Any existing index with the same uid as an index in the dump file will be overwritten.

      Dump imports are [performed at launch](/reference/features/configuration.html#import-dump) using an option. [Batch size](/reference/features/configuration.html#dump-batch-size) can also be set at this time.

paths:

  /dumps:
    $ref: ./paths/dumps.yaml#/base
  /dumps/status:
    $ref: ./paths/dumps.yaml#/status

  /health:
    $ref: ./paths/health.yaml#/base

  /indexes:
    $ref: ./paths/indexes.yaml#/base
  /indexes/{indexUid}:
    $ref: ./paths/indexes.yaml#/indexUid

  /indexes/{indexUid}/documents:
    $ref: ./paths/documents.yaml#/indexDocument
  /indexes/{indexUid}/documents/delete-batch:
    $ref: ./paths/documents.yaml#/indexDocumentDeleteBatch
  /indexes/{indexUid}/documents/{documentId}:
    $ref: ./paths/documents.yaml#/indexDocumentId

  /indexes/{indexUid}/search:
    $ref: ./paths/search.yaml#/indexSearch

  /indexes/{indexUid}/settings:
    $ref: ./paths/settings.yaml#/base
  /indexes/{indexUid}/settings/synonyms:
    $ref: ./paths/settings.yaml#/synonyms
  /indexes/{indexUid}/settings/stop-words:
    $ref: ./paths/settings.yaml#/stopWords
  /indexes/{indexUid}/settings/ranking-rules:
    $ref: ./paths/settings.yaml#/rankingRules
  /indexes/{indexUid}/settings/attributes-for-faceting:
    $ref: ./paths/settings.yaml#/attributesForFaceting
  /indexes/{indexUid}/settings/distinct-attribute:
    $ref: ./paths/settings.yaml#/distinctAttribute
  /indexes/{indexUid}/settings/searchable-attributes:
    $ref: ./paths/settings.yaml#/searchableAttributes
  /indexes/{indexUid}/settings/displayed-attributes:
    $ref: ./paths/settings.yaml#/displayedAttributes

  /indexes/{indexUid}/stats:
    $ref: ./paths/stats.yaml#/index

  /indexes/{indexUid}/updates:
    $ref: ./paths/updates.yaml#/indexUpdates
  /indexes/{indexUid}/updates/{updateId}:
    $ref: ./paths/updates.yaml#/indexUpdateId

  /keys:
    $ref: ./paths/keys.yaml#/base

  /stats:
    $ref: ./paths/stats.yaml#/base

  /version:
    $ref: ./paths/version.yaml#/base
